#version 460 core
#pragma shader_stage(fragment)
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "/Engine/Shaders/Include/Light.rsh"

layout(location = 5) uniform vec4 u_BaseColorFactor;
layout(location = 6) uniform float u_Metallic;
layout(location = 7) uniform float u_Roughness;
layout(location = 8) uniform float u_NormalScale;
layout(location = 9) uniform float u_OcclusionStrength;
layout(location = 10) uniform vec3 u_EmissiveFactor;

layout(location = 11, binding = 5) uniform sampler2D s_BaseColorTex;
layout(location = 12, binding = 6) uniform sampler2D s_MetallicRoughnessTex;
layout(location = 13, binding = 7) uniform sampler2D s_NormalTex;
layout(location = 14, binding = 8) uniform sampler2D s_OcclusionTex;
layout(location = 15, binding = 9) uniform sampler2D s_EmissiveTex;

layout(location = 0) in Vertex
{
    vec3 WorldPos;
    vec3 Normal;
    vec3 Tangent;
    vec3 Bitangent;
    vec4 Color;
    vec2 TexCoord0;
} IN;

layout(location = 0) out vec4 o_Color;

void main(void)
{
    //Color
#ifdef USE_BASECOLOR_TEX
    vec4 BaseColor = texture(s_BaseColorTex, IN.TexCoord0);
    //BaseColor.rgb = pow(BaseColor.rgb, vec3(2.2)); //ToLinear
    BaseColor *= u_BaseColorFactor;
#else
    vec4 BaseColor = u_BaseColorFactor;
#endif

    //Normal
#ifdef USE_NORMAL_TEX
    mat3 TBN = mat3(IN.Tangent, IN.Bitangent, IN.Normal);
    vec3 TexNormal = normalize((texture(s_NormalTex, IN.TexCoord0).xyz * 2.0 - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0f));
    vec3 Normal = normalize(TBN * TexNormal);
#else
    vec3 Normal = IN.Normal;
#endif

    //MetallicRoughness
#ifdef USE_METALLICROUGHNESS_TEX
    float Metallic = u_Metallic * texture(s_MetallicRoughnessTex, IN.TexCoord0).b;
    float Roughness = u_Roughness * texture(s_MetallicRoughnessTex, IN.TexCoord0).g;
#else
    float Metallic = u_Metallic;
    float Roughness = u_Roughness;
#endif

    //Occlusion
#ifdef USE_OCCLUSION_TEX
    float Occlution = u_OcclusionStrength * texture(s_OcclusionTex, IN.TexCoord0).r;
#else
    float Occlution = u_OcclusionStrength;
#endif

    //Emissive
#ifdef USE_EMISSIVE_TEX
    vec3 Emissive = texture(s_EmissiveTex, IN.TexCoord0).rgb * u_EmissiveFactor;
#else
    vec3 Emissive = u_EmissiveFactor;
#endif

    vec3 ViewDir = normalize(ub_Camera.Pos.xyz - IN.WorldPos);
    float NdV = max(dot(Normal, ViewDir), 0.0);
    vec3 F0 = mix(kDielectric, BaseColor.rgb, Metallic);

    vec3 SumLightColor = vec3(0.0);
    for(uint i = 0; i < ub_DirectionalLight.Count; i++)
    {
        vec3 LightDir = -ub_DirectionalLight.Lights[i].Direction.xyz;
        float Radiance = ub_DirectionalLight.Lights[i].Intensity;
        /*
        if(Radiance == 0.0)
        {
            continue;
        }
        */
        
        vec3 LightColor = ComputeLightPBR(BaseColor.rgb, Roughness, Metallic, Normal, ViewDir, LightDir, NdV, F0, Radiance);
        LightColor *= ub_DirectionalLight.Lights[i].Color.rgb;
        //TODO: Shadow

        //LightColor += (diffuseBRDF + specularBRDF) * Radiance * NdL;
        SumLightColor += LightColor;
    }

    //TODO: IBL Lighting
    vec3 AmbientColor = kAmbientFactor * BaseColor.rgb * Occlution;
    o_Color.rgb = AmbientColor + SumLightColor + Emissive;
    //o_Color.rgb = pow(o_Color.rgb, vec3(1.0/2.2)); //Gamma Correction
    o_Color.a = BaseColor.a;
}